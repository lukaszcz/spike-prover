Resetting all values
Opening ../examples/sorted.spike

Successfully parsed sorts

Successfully parsed constructors

Successfully parsed functions

Successfully parsed axioms
All constructors are free
dico_const_string:
2 --> 0
7 --> false
-1 --> sorted
5 --> Cons
6 --> true
-6 --> eq_nat
-2 --> leq
-4 --> insert
-5 --> isort
-3 --> length
3 --> S
4 --> Nil

Successfully parsed statuses
dico_id_status:
Completing status dico with default status "Multiset"
AC symbols: 
Case 0: no AC symbols
Orienting axioms
	[ 18 ] eq_nat (0, 0) -> true ;
	[ 19 ] eq_nat (0, S (u1)) -> false ;
	[ 20 ] eq_nat (S (u1), 0) -> false ;
	[ 21 ] eq_nat (S (u1), S (u2)) -> eq_nat (u1, u2) ;
	[ 22 ] leq (0, u1) -> true ;
	[ 23 ] leq (u1, 0) -> false ;
	[ 24 ] leq (S (u1), S (u2)) -> leq (u1, u2) ;
	[ 25 ] length (Nil) -> 0 ;
	[ 26 ] length (Cons (u1, u2)) -> S (length (u2)) ;
	[ 27 ] insert (u1, Nil) -> Cons (u1, Nil) ;
	[ 28 ] leq (u1, u2) = true => insert (u1, Cons (u2, u3)) -> Cons (u1, Cons (u2, u3)) ;
	[ 29 ] leq (u1, u2) = false => insert (u1, Cons (u2, u3)) -> Cons (u2, insert (u1, u3)) ;
	[ 30 ] isort (Nil) -> Nil ;
	[ 31 ] isort (Cons (u1, u2)) -> insert (u1, isort (u2)) ;
	[ 32 ] sorted (Nil) -> true ;
	[ 33 ] sorted (Cons (u1, Nil)) -> true ;
	[ 34 ] leq (u1, u2) = true => sorted (Cons (u1, Cons (u2, u3))) -> sorted (Cons (u2, u3)) ;
	[ 35 ] leq (u1, u2) = false => sorted (Cons (u1, Cons (u2, u3))) -> false ;
dico_order:
sorted: leq 0 S Nil Cons true false;
eq_nat: 0 S true false;
leq: 0 S true false;
insert: leq 0 S Nil Cons true false;
isort: insert leq 0 S Nil Cons true false;
length: 0 S Nil Cons;
dico_equivalence:
Computing nullary sorts
Sort "nat" is not nullary
Sort "list" is not nullary
Sort "nat" is not nullary
Sort "bool" is nullary
Computing nullary individuals
We do not have a boolean specification

Successfully parsed properties
Computing default priorities
Using default priorities
Generate will be attempted on the following positions:
Ind_pos_position ()

Successfully parsed strategies

Successfully parsed startpoint

Successfully parsed conjectures
	[ 36 ] sorted (Cons (u1, u2)) = true => sorted (u2) = true ;

Successfully parsed conjectures
	[ 37 ] length (insert (u1, u2)) = S (length (u2)) ;

Successfully parsed conjectures
	[ 38 ] length (isort (u1)) = length (u1) ;

Successfully parsed lemmas
	[ 39 ] sorted (insert (u1, u2)) = sorted (u2) ;
Closing ../examples/sorted.spike

Successfully parsed conjectures
	[ 40 ] sorted (isort (u1)) = true ;


************************************************************
******************* Starting computation *******************
************************************************************


dico_st:
fullind = (repeat (stra, inst_var_rule), print_goals_history)
negative_clash_rule = delete(id,[try (negative_clash)])
subsumption_rule = delete(id,[try (subsumption (L&C))])
normalize = repeat try (delete(id,[negative_clash]), simplify(id,[eliminate_redundant_literal]), simplify(id,[eliminate_trivial_literal]), simplify(id,[positive_clash]), simplify(id,[congruence_closure]), simplify(id,[negative_decomposition]), simplify(id,[auto_simplification]), simplify(id,[rewriting (normalize, L&R, *)]), delete(id,[subsumption (L&C)]), simplify(id,[total_case_rewriting (builtin, R, *)]))
stra = repeat (try (tautology_rule, negative_clash_rule, subsumption_rule, decomposition_rule, rewriting_rule, print_goals, total_case_rewriting_add_premise_rule))
inst_var_rule = add_premise(generate,[try (id)])
recursive = try (delete, rewrite, add_premise(id,[generate]))
query = ?
generate_reduce = try (delete(id,[tautology]), rewrite)
rewriting_rule = simplify(id,[try (rewriting (rewrite, L&R&C, *))])
tautology_rule = delete(id,[try (tautology)])
total_case_rewriting_add_premise_rule = add_premise(total_case_rewriting (simplify_strat, R, *),[try (id)])
decompose = saturate (simplify(id,[positive_decomposition]), simplify(id,[negative_decomposition]))
clean = saturate (simplify(id,[eliminate_redundant_literal]), simplify(id,[eliminate_trivial_literal]), simplify(id,[positive_clash]))
simplify = saturate (delete, clean, decompose, simplify(id,[auto_simplification]))
total_case_rewriting_rule = simplify(id,[try (total_case_rewriting (simplify_strat, R, *))])
rewrite = try (simplify(id,[rewriting (normalize, R, *)]), simplify(id,[equational_rewriting (*)]), simplify(id,[partial_case_rewriting (R&L, *)]))
builtin = try (delete, rewrite, add_premise(id,[generate]))
decomposition_rule = simplify(id,[try (negative_decomposition)])
delete = saturate (delete(id,[tautology]), delete(id,[subsumption (R&L)]), delete(id,[negative_clash]))
Start point is now fullind

************************  Proving  *************************
[ 41 ] sorted (Cons (u1, u2)) = true => sorted (u2) = true ;
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


using strategy 

fullind
************************************************************

Current goals E1 (1):
[ 41 ] sorted (Cons (u1, u2)) = true => sorted (u2) = true ;


GENERATE 1 on
« [ 41 ] sorted (Cons (u1, u2)) = true => sorted (u2) = true ;

from the positions:
	false/1/[1] --> sorted (Cons (u1, u2))
	
at false/1/[1] on 	sorted (Cons (u1, u2)) 	 using the test substitutions:

 1) <! u2, Nil !>
 2) <! u2, Cons (u4, u5) !>
 3) <! u2, Cons (u4, u5) !>

We obtain :

1) [ 54 ] true = true => sorted (Nil) = true ;

using the rule [ 33 ] sorted (Cons (u1, Nil)) -> true ;
2) [ 60 ] sorted (Cons (u4, u5)) = true /\ leq (u1, u4) = true => sorted (Cons (u4, u5)) = true ;

using the rule [ 34 ] leq (u1, u2) = true => sorted (Cons (u1, Cons (u2, u3))) -> sorted (Cons (u2, u3)) ;
3) [ 66 ] false = true /\ leq (u1, u4) = false => sorted (Cons (u4, u5)) = true ;

using the rule [ 35 ] leq (u1, u2) = false => sorted (Cons (u1, Cons (u2, u3))) -> false ;

TAUTOLOGY: delete
« [ 60 ] sorted (Cons (u4, u5)) = true /\ leq (u1, u4) = true => sorted (Cons (u4, u5)) = true ;


NEGATIVE CLASH: delete
« [ 66 ] false = true /\ leq (u1, u4) = false => sorted (Cons (u4, u5)) = true ;

NEGATIVE DECOMPOSITION : simplify
« [ 54 ] true = true => sorted (Nil) = true ;

» [ 68 ] sorted (Nil) = true ;


REWRITING 1: simplify by rewriting 
« [ 68 ] sorted (Nil) = true ;


- rewriting at the position true/1/[1]:

sorted (Nil)
   is simplified by : sorted (Nil) -> true   (from [ 32 ] of R)
   with substitution: <!  !> into
true


» [ 72 ] true = true ;

TAUTOLOGY: delete
« [ 72 ] true = true ;



The following initial conjectures are inductive consequences of R

[ 41 ] sorted (Cons (u1, u2)) = true => sorted (u2) = true ;


(* Generating the COQ proof of the conjectures:

  forall u1 u2, (sorted (Cons u1 u2)) = true -> (sorted u2) = true

*)
Elapsed time: 0.022142 s

--- Global statistics of the main successful operations ---

- tautology               : 2 of 8 tries.
- rewriting               : 1 of 2 tries.
- augmentation            : 0 of 0 tries.
- subsumption             : 0 of 3 tries.
- total_case_rewriting    : 0 of 1 tries.
- generate                : 1 of 1 tries.

-----------
  Total clauses: 72

-----------
  Total lemmas: 0

  Max depth    : 1

************************  Proving  *************************
[ 73 ] length (insert (u1, u2)) = S (length (u2)) ;
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


using lemmas

[ 41 ] sorted (Cons (u1, u2)) = true => sorted (u2) = true ;


using strategy 

fullind
************************************************************

Current goals E2 (1):
[ 73 ] length (insert (u1, u2)) = S (length (u2)) ;


GENERATE 2 on
« [ 73 ] length (insert (u1, u2)) = S (length (u2)) ;

from the positions:
	true/1/[1] --> length (insert (u1, u2))
	true/1/[1-1] --> insert (u1, u2)
	
at true/1/[1-1] on 	insert (u1, u2) 	 using the test substitutions:

 1) <! u2, Nil !>
 2) <! u2, Cons (u4, u5) !>
 3) <! u2, Cons (u4, u5) !>

We obtain :

1) [ 86 ] length (Cons (u1, Nil)) = S (length (Nil)) ;

using the rule [ 27 ] insert (u1, Nil) -> Cons (u1, Nil) ;
2) [ 92 ] leq (u1, u4) = true => length (Cons (u1, Cons (u4, u5))) = S (length (Cons (u4, u5))) ;

using the rule [ 28 ] leq (u1, u2) = true => insert (u1, Cons (u2, u3)) -> Cons (u1, Cons (u2, u3)) ;
3) [ 98 ] leq (u1, u4) = false => length (Cons (u4, insert (u1, u5))) = S (length (Cons (u4, u5))) ;

using the rule [ 29 ] leq (u1, u2) = false => insert (u1, Cons (u2, u3)) -> Cons (u2, insert (u1, u3)) ;


REWRITING 2: simplify by rewriting 
« [ 86 ] length (Cons (u1, Nil)) = S (length (Nil)) ;


- rewriting at the position true/1/[1]:

length (Cons (u1, Nil))
   is simplified by : length (Cons (u1, u2)) -> S (length (u2))   (from [ 26 ] of R)
   with substitution: <! u1, u1 ; u2, Nil !> into
S (length (Nil))


» [ 111 ] S (length (Nil)) = S (length (Nil)) ;

TAUTOLOGY: delete
« [ 111 ] S (length (Nil)) = S (length (Nil)) ;


REWRITING 3: simplify by rewriting 
« [ 92 ] leq (u1, u4) = true => length (Cons (u1, Cons (u4, u5))) = S (length (Cons (u4, u5))) ;


- rewriting at the position true/1/[1]:

length (Cons (u1, Cons (u4, u5)))
   is simplified by : length (Cons (u1, u2)) -> S (length (u2))   (from [ 26 ] of R)
   with substitution: <! u1, u1 ; u2, Cons (u4, u5) !> into
S (length (Cons (u4, u5)))


» [ 114 ] leq (u1, u4) = true => S (length (Cons (u4, u5))) = S (length (Cons (u4, u5))) ;

TAUTOLOGY: delete
« [ 114 ] leq (u1, u4) = true => S (length (Cons (u4, u5))) = S (length (Cons (u4, u5))) ;


REWRITING 4: simplify by rewriting 
« [ 98 ] leq (u1, u4) = false => length (Cons (u4, insert (u1, u5))) = S (length (Cons (u4, u5))) ;


- rewriting at the position true/1/[1]:

length (Cons (u4, insert (u1, u5)))
   is simplified by : length (Cons (u1, u2)) -> S (length (u2))   (from [ 26 ] of R)
   with substitution: <! u1, u4 ; u2, insert (u1, u5) !> into
S (length (insert (u1, u5)))


» [ 117 ] leq (u1, u4) = false => S (length (insert (u1, u5))) = S (length (Cons (u4, u5))) ;

POSITIVE DECOMPOSITION : simplify
« [ 117 ] leq (u1, u4) = false => S (length (insert (u1, u5))) = S (length (Cons (u4, u5))) ;

» [ 120 ] leq (u1, u4) = false => length (insert (u1, u5)) = length (Cons (u4, u5)) ;


REWRITING 5: simplify by rewriting 
« [ 120 ] leq (u1, u4) = false => length (insert (u1, u5)) = length (Cons (u4, u5)) ;


- rewriting at the position true/1/[1]:

length (insert (u1, u5))
   is simplified by : length (insert (u1, u2)) -> S (length (u2))   (from [ 73 ] of C1)
   with substitution: <! u1, u1 ; u2, u5 !> into
S (length (u5))


» [ 126 ] leq (u1, u4) = false => S (length (u5)) = length (Cons (u4, u5)) ;


REWRITING 6: simplify by rewriting 
« [ 126 ] leq (u1, u4) = false => S (length (u5)) = length (Cons (u4, u5)) ;


- rewriting at the position true/1/[2]:

length (Cons (u4, u5))
   is simplified by : length (Cons (u1, u2)) -> S (length (u2))   (from [ 26 ] of R)
   with substitution: <! u1, u4 ; u2, u5 !> into
S (length (u5))


» [ 132 ] leq (u1, u4) = false => S (length (u5)) = S (length (u5)) ;

TAUTOLOGY: delete
« [ 132 ] leq (u1, u4) = false => S (length (u5)) = S (length (u5)) ;



The following initial conjectures are inductive consequences of R

[ 73 ] length (insert (u1, u2)) = S (length (u2)) ;


(* Generating the COQ proof of the conjectures:

  forall u1 u2, (length (insert u1 u2)) = (S (length u2))

*)
Elapsed time: 0.030598 s

--- Global statistics of the main successful operations ---

- tautology               : 5 of 24 tries.
- rewriting               : 6 of 8 tries.
- augmentation            : 0 of 0 tries.
- subsumption             : 0 of 13 tries.
- total_case_rewriting    : 0 of 2 tries.
- generate                : 2 of 2 tries.

-----------
  Total clauses: 133

-----------
  Total lemmas: 1

  Max depth    : 1

************************  Proving  *************************
[ 134 ] length (isort (u1)) = length (u1) ;
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


using lemmas

[ 41 ] sorted (Cons (u1, u2)) = true => sorted (u2) = true ;
[ 73 ] length (insert (u1, u2)) -> S (length (u2)) ;


using strategy 

fullind
************************************************************

Current goals E3 (1):
[ 134 ] length (isort (u1)) = length (u1) ;


GENERATE 3 on
« [ 134 ] length (isort (u1)) = length (u1) ;

from the positions:
	true/1/[1] --> length (isort (u1))
	true/1/[1-1] --> isort (u1)
	
at true/1/[1-1] on 	isort (u1) 	 using the test substitutions:

 1) <! u1, Nil !>
 2) <! u1, Cons (u2, u3) !>

We obtain :

1) [ 146 ] length (Nil) = length (Nil) ;

using the rule [ 30 ] isort (Nil) -> Nil ;
2) [ 152 ] length (insert (u2, isort (u3))) = length (Cons (u2, u3)) ;

using the rule [ 31 ] isort (Cons (u1, u2)) -> insert (u1, isort (u2)) ;

TAUTOLOGY: delete
« [ 146 ] length (Nil) = length (Nil) ;


REWRITING 7: simplify by rewriting 
« [ 152 ] length (insert (u2, isort (u3))) = length (Cons (u2, u3)) ;


- rewriting at the position true/1/[1]:

length (insert (u2, isort (u3)))
   is simplified by : length (insert (u1, u2)) -> S (length (u2))   (from [ 73 ] of L)
   with substitution: <! u1, u2 ; u2, isort (u3) !> into
S (length (isort (u3)))


» [ 158 ] S (length (isort (u3))) = length (Cons (u2, u3)) ;


REWRITING 8: simplify by rewriting 
« [ 158 ] S (length (isort (u3))) = length (Cons (u2, u3)) ;


- rewriting at the position true/1/[1-1]:

length (isort (u3))
   is simplified by : length (isort (u1)) -> length (u1)   (from [ 134 ] of C1)
   with substitution: <! u1, u3 !> into
length (u3)


» [ 165 ] S (length (u3)) = length (Cons (u2, u3)) ;


REWRITING 9: simplify by rewriting 
« [ 165 ] S (length (u3)) = length (Cons (u2, u3)) ;


- rewriting at the position true/1/[2]:

length (Cons (u2, u3))
   is simplified by : length (Cons (u1, u2)) -> S (length (u2))   (from [ 26 ] of R)
   with substitution: <! u1, u2 ; u2, u3 !> into
S (length (u3))


» [ 173 ] S (length (u3)) = S (length (u3)) ;

TAUTOLOGY: delete
« [ 173 ] S (length (u3)) = S (length (u3)) ;



The following initial conjectures are inductive consequences of R

[ 134 ] length (isort (u1)) = length (u1) ;


(* Generating the COQ proof of the conjectures:

  forall u1, (length (isort u1)) = (length u1)

*)
Elapsed time: 0.033813 s

--- Global statistics of the main successful operations ---

- tautology               : 7 of 30 tries.
- rewriting               : 9 of 12 tries.
- augmentation            : 0 of 0 tries.
- subsumption             : 0 of 17 tries.
- total_case_rewriting    : 0 of 3 tries.
- generate                : 3 of 3 tries.

-----------
  Total clauses: 174

-----------
  Total lemmas: 2

  Max depth    : 1

************************  Proving  *************************
[ 175 ] sorted (isort (u1)) = true ;
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


using lemmas

[ 41 ] sorted (Cons (u1, u2)) = true => sorted (u2) = true ;
[ 73 ] length (insert (u1, u2)) -> S (length (u2)) ;
[ 134 ] length (isort (u1)) -> length (u1) ;
[ 39 ] sorted (insert (u1, u2)) -> sorted (u2) ;


using strategy 

fullind
************************************************************

Current goals E4 (1):
[ 175 ] sorted (isort (u1)) = true ;


GENERATE 4 on
« [ 175 ] sorted (isort (u1)) = true ;

from the positions:
	true/1/[1-1] --> isort (u1)
	true/1/[1] --> sorted (isort (u1))
	
at true/1/[1-1] on 	isort (u1) 	 using the test substitutions:

 1) <! u1, Nil !>
 2) <! u1, Cons (u2, u3) !>

We obtain :

1) [ 189 ] sorted (Nil) = true ;

using the rule [ 30 ] isort (Nil) -> Nil ;
2) [ 195 ] sorted (insert (u2, isort (u3))) = true ;

using the rule [ 31 ] isort (Cons (u1, u2)) -> insert (u1, isort (u2)) ;


REWRITING 10: simplify by rewriting 
« [ 189 ] sorted (Nil) = true ;


- rewriting at the position true/1/[1]:

sorted (Nil)
   is simplified by : sorted (Nil) -> true   (from [ 32 ] of R)
   with substitution: <!  !> into
true


» [ 208 ] true = true ;

TAUTOLOGY: delete
« [ 208 ] true = true ;


REWRITING 11: simplify by rewriting 
« [ 195 ] sorted (insert (u2, isort (u3))) = true ;


- rewriting at the position true/1/[1]:

sorted (insert (u2, isort (u3)))
   is simplified by : sorted (insert (u1, u2)) -> sorted (u2)   (from [ 39 ] of L)
   with substitution: <! u1, u2 ; u2, isort (u3) !> into
sorted (isort (u3))


» [ 211 ] sorted (isort (u3)) = true ;


SUBSUMPTION: delete
« [ 211 ] sorted (isort (u3)) = true ;

Subsumed in C1 by [ 175 ] sorted (isort (u1)) = true ;

	with epsilon = <! u1, u3 !>



The following initial conjectures are inductive consequences of R

[ 175 ] sorted (isort (u1)) = true ;


(* Generating the COQ proof of the conjectures:

  forall u1, (sorted (isort u1)) = true

*)
Elapsed time: 0.036441 s

--- Global statistics of the main successful operations ---

- tautology               : 8 of 37 tries.
- rewriting               : 11 of 15 tries.
- augmentation            : 0 of 0 tries.
- subsumption             : 1 of 22 tries.
- total_case_rewriting    : 0 of 4 tries.
- generate                : 4 of 4 tries.

-----------
  Total clauses: 218

-----------
  Total lemmas: 4

  Max depth    : 1


All sets of conjectures were successfully processed


